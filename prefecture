#!/bin/bash
# Mainainer Ludovic Tual @ 2024.

# This software is a SSL/TLS certificate toolbox.

VERSION=0.0.9

# Colors.
Normal='\033[0m'          # Text Reset
BWhite='\033[1;37m'       # Bold White
White='\033[0;37m'        # White

# Title banner.
fn_banner ()
{
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë    SSL/TLS Prefecture Toolbox   ‚ïë"    
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
}

# Print the helper.
fn_help ()
{
echo "This tool is designed to help the management of certs."
echo ""
echo "Usage:" 
echo "        -d website.com OR -f website.crt" 
echo ""
echo "Option:"
echo "        -k private.key --> Verify if key is related to the certificate."
echo "        --dig                --> Search for keyfile in HOME and try to match the cert." 
echo "        -g                   --> Generate fullchain certificate." 
echo "        --version            --> Version number."           
echo ""
}

# Decode arguments.
fn_arg_check ()
{
if [[ -z "$1" ]];
  then
   fn_banner  
   echo " ‚ùå Missing arg.. Exit."
   echo ""
   fn_help
   exit 0
fi
}



# Args decoder : 
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--domain)
      DOMAIN_NAME=$2
      RUNMODE=1
      fn_arg_check $2
      shift 2
      ;;
    -f|--file)
      CERT_FILE=$2
      RUNMODE=1
      fn_arg_check $2
      shift 2
      ;;
    -k|--key)
      KEY_FILE=$2
      echo "$2" > /tmp/key_list.tmp
      SUBMODE=1
      fn_arg_check $2
      shift 2
      ;;
    --dig)
      SUBMODE=2
      DIG_KEY=true
      shift 1
      ;;
    -g|--generate-full-chain)
      GEN_FULL=true
      shift 1
      ;;
     -h|--help)
      fn_banner
      fn_help
      exit 1
      ;;
     --version)
      echo "$VERSION"
      exit 0
      ;;       
    -*|--*)
      fn_banner  
      fn_help
      echo " ‚ùå Unknown option $1"
      echo ""
      exit 1
      ;;
    *)
      fn_banner
      fn_help
      exit 0
      ;;
  esac
done

### Generate fullchain certificate.crt
fn_forge_fullchain ()
{
if [ $GEN_FULL ];
  then
   echo "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
   echo ""
   echo -e " üèóÔ∏è  - Generate fullchain cert file : $BWhite"$ISSUED_CRT"_fullchain_$EXPIRE_YEAR.crt $Normal" 
   cat /tmp/cert_*.crt > $ISSUED_CRT"_fullchain_$EXPIRE_YEAR.crt" 
   echo ""
fi
}

### Find .key/pem files in $HOME to compare them with CRT file.
fn_key_digger ()
{
echo -e " üîç - Please wait.. digging for üîë inside $BWhite$HOME$Normal"   
find -E $HOME -iregex ".*\.(key|pem)" 2>/dev/null | grep -v ' ' > /tmp/key_list.tmp
echo ""
}

### Mode that compare KEY and CRT Files.
fn_certificate_compare ()
{
echo "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
echo ""

# Get MD5 Value of CRT.
MD5_CRT=$(openssl x509 -in /tmp/cert_0.crt -pubkey -noout -outform pem  2>/dev/null | md5)

# Read the list of keys to check. 
while read -r KEYFILE 
do
   # Get MD5 Value of CRT.
   MD5_PK=$(openssl pkey -in $KEYFILE -pubout -outform pem -passin pass:1234 2>/dev/null | md5)
  
if [[ "$MD5_CRT" == "$MD5_PK" ]];
  then
   echo -e " ‚úÖ Congrats.. $BWhite$KEYFILE$Normal match the certificate."
   echo ""
   echo -e " üîè MD5sum Certificate : $BWhite$MD5_CRT$Normal"
   echo -e " üîê MD5sum Secret key  : $BWhite$MD5_PK$Normal"
   echo ""
   return
  else 
   echo " üî∂ Trying.. But the key didn't match the certificate."
fi
done < /tmp/key_list.tmp
echo " ‚ùå Sorry.. Unable to find a key that match the certificate."
echo ""
}

fn_get_basic_infos ()
{
SERVER_DATE_CRT=$(openssl x509 -in /tmp/cert_0.crt -noout -enddate | cut -d"=" -f2)
EXPIRE_YEAR=$(echo "$SERVER_DATE_CRT" | awk '{print $4}')
ISSUED_CRT=$(openssl x509 -in /tmp/cert_0.crt  -noout -text | grep "Subject:" | awk '{print $NF}' | cut -d'=' -f2)

echo -e " üåè - Certificate for domain : $BWhite$DOMAIN_NAME$Normal" 
echo -e " üëë - Is issued for CN : $BWhite$ISSUED_CRT$Normal"
echo -e " üî• - Expire after : $BWhite$SERVER_DATE_CRT$Normal"
echo ""
}

fn_get_chain ()
{
echo "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
echo ""
# Get URL of the CA Issuer.
INTER_URL=$(openssl x509 -in /tmp/cert_0.crt  -noout -text | grep "CA Issuers" | cut -d":" -f2,3)

# Check if CA Issuer has been found. 
if [[ -z "$INTER_URL" ]]
  then  
   echo " ‚ùå Issuer can't be found in cert.. Exit."
   echo ""
   exit 0
fi

# Start at deeph 1 for loop rotation.
DEEPH=1
# Loop to explore the deeph of the certifcates chain.
while [[ ! -z "$INTER_URL" ]]; do
# Download the intermediates certs.
wget -q -O /tmp/cert_$DEEPH.crt $INTER_URL && openssl x509 -in /tmp/cert_$DEEPH.crt -inform DER -out /tmp/cert_$DEEPH.crt && \
echo -e " üìù - $BWhite /tmp/cert_$DEEPH.crt $Normal has been generated for :$BWhite $INTER_URL $Normal" 
cat /tmp/cert_$DEEPH.crt >> /tmp/ca_bundle.crt

# openssl x509 -in /tmp/cert_0.crt  -noout -enddate 
# openssl verify -untrusted cert_1.crt /tmp/cert_0.crt

# openssl verify -untrusted /tmp/ca_bundle.crt /tmp/cert_0.crt
# cat cert_2.crt cert_1.crt > /tmp/ca_bundle.crt 

# Detect the next CA URL Issuers.
INTER_URL=$(openssl x509 -in /tmp/cert_$DEEPH.crt -noout -text | grep "CA Issuers" | cut -d":" -f2,3)
# Check if max deeph is reached. 
if [[ -z "$INTER_URL" ]]
  then
   echo ""  
   echo " üõù - Certificate chain has reached maximum depth.. "
   echo "" 
 #  echo "Validity : "$(openssl verify -untrusted /tmp/ca_bundle.crt /tmp/cert_0.crt | awk '{print $NF}')
fi
# Increase rotate loop and continue.
DEEPH=$((DEEPH+1))
done
}


# Download crt file or get it from local.
fn_get_cert ()
{

# Check if at leat one cert source is feeded.
if [[ -z "$CERT_FILE" && -z "$DOMAIN_NAME" ]];
  then  
   echo " ‚ùå No cert has been provided.. Exit."
   echo ""
   fn_help
   exit 0
fi

# Is domain valid ? (check)
# Is file valide ? (check)


if [[ ! -z "$DOMAIN_NAME" ]]
  then
   true | openssl s_client -connect $DOMAIN_NAME:443 -servername "$DOMAIN_NAME" 2>/dev/null | openssl x509 > /tmp/cert_0.crt
  else
   DOMAIN_NAME="Not Provided."
   cp $CERT_FILE /tmp/cert_0.crt
fi
}

fn_run_submode ()
{
case $SUBMODE in
  1)
   # Compare mode.
   fn_certificate_compare $KEY_FILE
    ;;
  2)
    # Dig mode.
   fn_key_digger
   fn_certificate_compare
    ;;
esac
}

# Runmode trigger the differents actions.
fn_run_mode ()
{
case $RUNMODE in
  1)
   # Regular mode
    fn_banner
    fn_get_cert 
    fn_get_basic_infos
    fn_run_submode
    fn_get_chain
    fn_forge_fullchain
    ;;
  2)
    # Compare mode.
    fn_banner
    fn_get_cert
    fn_get_basic_infos
    ;;
esac
}

# Clean workspace and start the script.. LAUNCH !!
rm -f /tmp/ca_bundle.crt /tmp/cert_*.crt && fn_run_mode
